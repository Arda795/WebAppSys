package edu.fra.uas.service.grpc;

import org.slf4j.Logger;

import java.time.LocalDateTime;

import net.devh.boot.grpc.server.service.GrpcService;

// compiled classes (generated by the protoc compiler) are imported
import edu.fra.uas.grpc.StockQuoteServiceGrpc.StockQuoteServiceImplBase;
import edu.fra.uas.grpc.StockQuoteOuterClass.Stock;
import edu.fra.uas.grpc.StockQuoteOuterClass.StockQuote;

import io.grpc.stub.StreamObserver;

@GrpcService
public class StockServiceGrpc extends StockQuoteServiceImplBase {

    private static final Logger log = org.slf4j.LoggerFactory.getLogger(StockServiceGrpc.class);

    @Override
    public void serverSideStreamingGetListStockQuotes(Stock request, StreamObserver<StockQuote> responseObserver) {
        log.info("serverSideStreamingGetListStockQuotes called with request: {}", request);
        for (int i = 0; i < 5; i++) {
            StockQuote stockQuote = StockQuote.newBuilder()
                    .setSymbol(request.getSymbol())
                    .setPrice(Math.random())
                    .setTimestamp(LocalDateTime.now().toString())
                    .build();
            responseObserver.onNext(stockQuote);
            try{
                Thread.sleep(500);  // wait 500 ms
            } catch (InterruptedException e) {
                log.error("serverSideStreamingGetListStockQuotes failed", e);
            }
        }
        responseObserver.onCompleted();
    }

    @Override
    public StreamObserver<Stock> clientSideStreamingGetStatisticsOfStocks(StreamObserver<StockQuote> responseObserver) {
        log.info("clientSideStreamingGetStatisticsOfStocks called");

        return new StreamObserver<Stock>() {
            int count;
            double price = 0.0;
            double tempPrice = 0.0;
            StringBuffer sb = new StringBuffer();

            @Override
            public void onNext(Stock stock) {
                log.info("clientSideStreamingGetStatisticsOfStocks received stock: {}", stock);
                count++;
                log.info("clientSideStreamingGetStatisticsOfStocks count: {}", count);
                tempPrice = Math.random();
                log.info("clientSideStreamingGetStatisticsOfStocks price: {}", tempPrice);
                price += tempPrice;
                sb.append(":").append(stock.getSymbol());
            }

            @Override
            public void onCompleted() {
                log.info("clientSideStreamingGetStatisticsOfStocks completed");
                responseObserver.onNext(StockQuote.newBuilder()
                        .setSymbol("Average")
                        .setPrice(price/count)
                        .setTimestamp(LocalDateTime.now().toString())
                        .build());
                log.info("clientSideStreamingGetStatisticsOfStocks total price: {}", price);
                log.info("clientSideStreamingGetStatisticsOfStocks average price: {}", price/count);
                log.info("clientSideStreamingGetStatisticsOfStocks requested symbols: {}", sb.toString());
                responseObserver.onCompleted();
            }

            @Override
            public void onError(Throwable t) {
                log.error("clientSideStreamingGetStatisticsOfStocks failed", t);
            }

        };
    }

    @Override
    public StreamObserver<Stock> bidirectionalStreamingGetListsStockQuotes(final StreamObserver<StockQuote> responseObserver) {
        log.info("bidirectionalStreamingGetListsStockQuotes called");

        return new StreamObserver<Stock>() {

            @Override
            public void onNext(Stock stock) {
                log.info("bidirectionalStreamingGetListsStockQuotes received stock: {}", stock);
                for (int i = 1; i <= 5; i++) {                    
                    StockQuote stockQuote = StockQuote.newBuilder()
                        .setSymbol(stock.getSymbol())
                        .setPrice(Math.random())
                        .setTimestamp(LocalDateTime.now().toString())
                        .build();
                    responseObserver.onNext(stockQuote);
                    try{
                        Thread.sleep(500);  // wait 500 ms
                    } catch (InterruptedException e) {
                        log.error("bidirectionalStreamingGetListsStockQuotes failed", e);
                    }
                }
            }

            @Override
            public void onCompleted() {
                log.info("bidirectionalStreamingGetListsStockQuotes completed");
                responseObserver.onCompleted();
            }

            @Override
            public void onError(Throwable t) {
                log.error("bidirectionalStreamingGetListsStockQuotes failed", t);
            }
        };
    }

}
