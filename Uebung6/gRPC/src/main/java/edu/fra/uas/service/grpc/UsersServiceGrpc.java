package edu.fra.uas.service.grpc;

import com.google.protobuf.BoolValue;
import com.google.protobuf.Int64Value;

// compiled classes (generated by the protoc compiler) are imported
import edu.fra.uas.grpc.UsersServiceGrpc.UsersServiceImplBase;
import edu.fra.uas.grpc.UsersServiceOuterClass.UserProto;
import edu.fra.uas.grpc.UsersServiceOuterClass.UsersRequest;
import edu.fra.uas.grpc.UsersServiceOuterClass.UsersResponse;

import edu.fra.uas.model.User;
import edu.fra.uas.service.UserService;

import io.grpc.stub.StreamObserver;

import net.devh.boot.grpc.server.service.GrpcService;

@GrpcService
public class UsersServiceGrpc extends UsersServiceImplBase {

    private final UserService userService;

    public UsersServiceGrpc(UserService userService) {
        this.userService = userService;
    }

    @Override
    public void listUsers(UsersRequest request, StreamObserver<UsersResponse> responseObserver) {
        Iterable<User> userIter = userService.getAllUsers();
        UsersResponse.Builder responseBuilder = UsersResponse.newBuilder();
        for (User user : userIter) {
            responseBuilder.addUsers(GrpcUsersMapper.mapUserToProto(user));
        }
        responseObserver.onNext(responseBuilder.build());
        responseObserver.onCompleted();
    }

    @Override
    public void findUserById(Int64Value request, StreamObserver<UserProto> responseObserver) {
        User user = userService.getUserById(request.getValue());
        responseObserver.onNext(GrpcUsersMapper.mapUserToProto(user));
        responseObserver.onCompleted();
    }

    @Override
    public void createUser(UserProto request, StreamObserver<UserProto> responseObserver) {
        User user = userService.createUser(GrpcUsersMapper.mapProtoToUser(request));
        responseObserver.onNext(GrpcUsersMapper.mapUserToProto(user));
        responseObserver.onCompleted();
    }

    @Override
    public void updateUser(UserProto request, StreamObserver<UserProto> responseObserver) {
        User user = userService.updateUser(GrpcUsersMapper.mapProtoToUser(request));
        responseObserver.onNext(GrpcUsersMapper.mapUserToProto(user));
        responseObserver.onCompleted();
    }

    @Override
    public void deleteUser(Int64Value request, StreamObserver<BoolValue> responseObserver) {
        User user = userService.deleteUser(request.getValue());
        if (user != null) {
            responseObserver.onNext(BoolValue.newBuilder().setValue(true).build());
        } else {
            responseObserver.onNext(BoolValue.newBuilder().setValue(false).build());
        }
        responseObserver.onCompleted();
    }
}
