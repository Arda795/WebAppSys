package edu.fra.uas.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.google.protobuf.BoolValue;
import com.google.protobuf.Int64Value;

import net.devh.boot.grpc.client.inject.GrpcClient;

// compiled classes (generated by the protoc compiler) are imported
import edu.fra.uas.grpc.UsersServiceGrpc;
import edu.fra.uas.grpc.UsersServiceOuterClass.UserProto;
import edu.fra.uas.grpc.UsersServiceOuterClass.UsersRequest;
import edu.fra.uas.grpc.UsersServiceOuterClass.UsersResponse;

import edu.fra.uas.model.User;

@Service
public class UserService {

    @GrpcClient("users-service-server")
    private UsersServiceGrpc.UsersServiceBlockingStub usersStub;

    public List<User> getAllUsers() {
        UsersRequest request = UsersRequest.newBuilder().build();
        UsersResponse response = usersStub.listUsers(request);

        List<UserProto> userProtoList = response.getUsersList();
        List<User> userList = new ArrayList<User>();
        for (UserProto userProto : userProtoList) {
            userList.add(
                new User(
                    userProto.getId(), 
                    userProto.getRole(), 
                    userProto.getFirstName(), 
                    userProto.getLastName(), 
                    userProto.getEmail(), 
                    userProto.getPassword()
                    )
                );
        }

        return userList;
    }

    public User getUserById(Long id) {
        Int64Value request = Int64Value.newBuilder().setValue(id).build();
        UserProto userProto = usersStub.findUserById(request);
        return new User(
            userProto.getId(), 
            userProto.getRole(), 
            userProto.getFirstName(), 
            userProto.getLastName(), 
            userProto.getEmail(), 
            userProto.getPassword()
            );
    }

    public User createUser(User user) {
        UserProto userProto = UserProto.newBuilder()
            .setRole(user.getRole())
            .setFirstName(user.getFirstName())
            .setLastName(user.getLastName())
            .setEmail(user.getEmail())
            .setPassword(user.getPassword())
            .build();
        UserProto createdUserProto = usersStub.createUser(userProto);
        return new User(
            createdUserProto.getId(), 
            createdUserProto.getRole(), 
            createdUserProto.getFirstName(), 
            createdUserProto.getLastName(), 
            createdUserProto.getEmail(), 
            createdUserProto.getPassword()
            );
    }

    public User updateUser(Long id, User user) {
        UserProto userProto = UserProto.newBuilder()
            .setId(id)
            .setRole(user.getRole())
            .setFirstName(user.getFirstName())
            .setLastName(user.getLastName())
            .setEmail(user.getEmail())
            .setPassword(user.getPassword())
            .build();
        UserProto updatedUserProto = usersStub.updateUser(userProto);
        return new User(
            updatedUserProto.getId(), 
            updatedUserProto.getRole(), 
            updatedUserProto.getFirstName(), 
            updatedUserProto.getLastName(), 
            updatedUserProto.getEmail(), 
            updatedUserProto.getPassword()
            );
    }

    public Boolean deleteUser(Long id) {
        Int64Value request = Int64Value.newBuilder().setValue(id).build();
        BoolValue boolValue = usersStub.deleteUser(request);
        return boolValue.getValue();
    }

}
